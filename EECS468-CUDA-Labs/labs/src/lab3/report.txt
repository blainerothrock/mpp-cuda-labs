Authors: Grant Gasser (GGL8333), Nayan Mehta (NMH3011), Blaine Rothrock (BRY4668)

——————————————
Instructions

In addition to the code, add a report file in your lab3 source directory. Your report
should contain the names and netIDs of all team members, and a journal of all
optimizations you tried, including those that were ultimately abandoned, or worsened
the performance, or did not work. Your report should have an entry for every
optimization tried, and each entry should briefly note:
a. What is the goal for the optimization, and briefly describe the changes you made in
the source files for that optimization.
b. Any difficulties with completing the optimization correctly.
c. The man-hours spent developing the optimization (even if it was abandoned or not
working). This will be an indication of the optimization’s difficulty.
d. If finished and working, the speedup of the code after the optimization was applied.
Please be brief in the descriptions above; there is no need for lengthy descriptions. Even
bulleted lists are enough if they convey everything you want to say.
——————————————

Approach 1:
    a) Block partitioning approach. Use atomic operations to avoid bank conflicts.
        Create own atomicAdd to handle uint32_t types.
    b) The approach did not quite work. All but roughly 10-15 values in bins were correct.
    c) ~ 8-10 hours. We abandoned after going to OH and decided to convert bins to uint32_t before performing atomicAdd.
    d) We were able to pass but the results were slow (performed similarly to the reference code). We believe it was
        slow because we needed to check for rollover in the atomicAdd function because it used CAS (divergent).

Approach 2:
    a) Privatization: Create a bins array in shared memory of uint32_t type. For given tid, perform atomicAdd on shared bins. Take
        shared bins result and atomicAdd those values into original bins array.
    b) Initially we tried to copy bins => device, then convert to uint32_t, then accumulate, then convert back to
        uint8_t, then copy back to device. The approach in described in (a) turned out to be simpler.
    c) ~5 hours
    d) Results:
        Timing 'ref_2dhisto' started
                GetTimeOfDay Time (for 1000 iterations) = 11.221
                Clock Time        (for 1000 iterations) = 11.2
        Timing 'opt_2dhisto' started
                GetTimeOfDay Time (for 1000 iterations) = 7.162
                Clock Time        (for 1000 iterations) = 7.16

    NOTE: When working on approach 1, we found that our code was drastically slower because of the divergance in
          in blocking overflow (255 + 1 = 255). Since the data bottleneck of this problem is reading the input, the
          difference in storing uint8_t and uint32_t is small and doesn't really affect the performance. When converting
          to uint32_t on the kernel we decided to ignore checking for rollover (since we have space in uint32_t), and
          just do so when we convert back to uint8_t on the host. We believe this improved our performance greatly.

Approach 3:
    a) Similar to Approach 2 but using block partitioning - similar to Strategy 1 in the book. Use sectionSize. Each
        thread processes a section and updates the 32int_t bins in shared memory.
    b) Fairly straightforward expansion of our previous method.
    c) ~2-3 hours
    d) 2x improvement:
        Timing 'opt_2dhisto' started
                GetTimeOfDay Time (for 1000 iterations) = 3.707
                Clock Time        (for 1000 iterations) = 3.71

Approach 4:
    a) Add interleaved partitioning to our existing privatized solution.
    b) Fairly straightforward, change a couple lines.
    c) <1 hour
    d) Results
    With calcsPerThread = 4:
        Timing 'opt_2dhisto' started
                GetTimeOfDay Time (for 1000 iterations) = 4.505
                Clock Time        (for 1000 iterations) = 4.51
    With calcsPerThread = 16 => less blocks:
         Timing 'opt_2dhisto' started
                 GetTimeOfDay Time (for 1000 iterations) = 3.59
                 Clock Time        (for 1000 iterations) = 3.58
    With calcsPerThread = 64 => even less blocks
        Timing 'opt_2dhisto' started
                GetTimeOfDay Time (for 1000 iterations) = 3.245
                Clock Time        (for 1000 iterations) = 3.25
    With calcsPerThread = 128 => even less blocks
        Timing 'opt_2dhisto' started
                GetTimeOfDay Time (for 1000 iterations) = 3.165
                Clock Time        (for 1000 iterations) = 3.13
    With calcsPerThread = 256 => even even less blocks
        Timing 'opt_2dhisto' started
                GetTimeOfDay Time (for 1000 iterations) = 3.09
                Clock Time        (for 1000 iterations) = 3.09
    With calcsPerThread = 512 => even even even less blocks
        Timing 'opt_2dhisto' started
                GetTimeOfDay Time (for 1000 iterations) = 3.055 => .003055ms/run
                Clock Time        (for 1000 iterations) = 3.05
    With calcsPerThread = 1024 (slowed down a bit)
        Timing 'opt_2dhisto' started
                    GetTimeOfDay Time (for 1000 iterations) = 3.1
                    Clock Time        (for 1000 iterations) = 3.1

Approach 5:
    a) Move input into shared memory? Talked to Emirhan. Unfortunately, in order to fit into shared mem, we had to
        decrease calcsPerThread to 8 (36.8KB) and thus it might not be worth taking this approach.
    b) Abandoned this approach.
    c) N/A
    d) N/A

Approach 6:
    a.) Try unrolling the for-loop with strides
    b.) none.
    c.) 1 hour
    d.) result:
        Timing 'opt_2dhisto' started
            GetTimeOfDay Time (for 1000 iterations) = 3.045
            Clock Time    (for 1000 iterations) = 3.04
          Timing 'opt_2dhisto' ended
        Loop unroll stride/2
         Timing 'opt_2dhisto' started
            GetTimeOfDay Time (for 1000 iterations) = 3.03
            Clock Time    (for 1000 iterations) = 3.03
          Timing 'opt_2dhisto' ended
         Timing 'opt_2dhisto' started
            GetTimeOfDay Time (for 1000 iterations) = 3.033
            Clock Time    (for 1000 iterations) = 3.02
          Timing 'opt_2dhisto' ended
        Loop unroll stride/4
        Timing 'opt_2dhisto' started
            GetTimeOfDay Time (for 1000 iterations) = 3.129
            Clock Time    (for 1000 iterations) = 3.12
          Timing 'opt_2dhisto' ended
